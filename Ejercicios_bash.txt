Ejercicio 1.
--------------
#!/bin/bash
echo "Hola mundo"


Ejercicio 2.
--------------
#!/bin/bash
ls /etc > listado.txt
cat listado.txt


Ejercicio 3.
--------------
#!/bin/bash
ls /etc > listado.txt
cat listado.txt
wc -lw listado.txt


Ejercicio 4.
--------------
#!/bin/bash
ls /etc > listado.txt
cat listado.txt
wc -lw listado.txt


Ejercicio 5.
--------------
#!/bin/bash
read -p "Introduce el primero numero: " num1
read -p "Introduce el segundo numero: " num2
media=$(echo "scale=2; ($num1 + $num2) / 2" | bc)
echo "La media aritmetica de tus numeros es $media "


Ejercicio 6.
--------------
#!/bin/bash
read -p "Dime una palabra: " palabra
echo "$palabra" >> lista.txt
cat lista.txt


Ejercicio 7.
--------------
#!/bin/bash
read -p "Introduce el nombre del directorio que quieres comprimir: " dir
fecha=$(date +%F)
tar -czf "${fecha}-$(basename "$dir").tar.gz" "$dir"


Ejercicio 8.
--------------
#!/bin/bash
read -p "Introduce dos numeros: " num1 num2
if [[ num1 -gt num2 ]]; then
        echo "$num1 es mayor que $num2"
elif  [[ num2 -gt num1 ]]; then
        echo "$num2 es mayor que $num1"
else
        echo "$num1 y $num2 son iguales"
fi




Ejercicio 9.
--------------
echo "1) Sumar"
echo "2) Restar"
echo "3) Multiplicar"
echo "4) Dividir"
echo "==================="

read -p "Elige una opcion (1-4): " opcion
read -p "Introduce el primer numero: " num1
read -p "Introduce el segundo numero: " num2

case $opcion in
    1)
        resultado=$(echo "$num1 + $num2" | bc)
        echo "Resultado de la suma: $resultado"
        ;;
    2)
        resultado=$(echo "$num1 - $num2" | bc)
        echo "Resultado de la resta: $resultado"
        ;;
    3)
        resultado=$(echo "$num1 * $num2" | bc)
        echo "Resultado de la multiplicación: $resultado"
        ;;
    4)
        # Comprobar división por cero
        if [ "$num2" = "0" ]; then
            echo "Error: división por cero"
        else
            resultado=$(echo "scale=2; $num1 / $num2" | bc)
            echo "Resultado de la división: $resultado"
        fi
        ;;
    *)
        echo "Opción no válida."
        ;;
esac


Ejercicio 10.
--------------
#!/bin/bash
read -p "Introduce un numero: " num
if ((num % 2 == 0 )); then
        echo "El numero $num es PAR"
else
        echo "El numero $num es IMPAR"
fi


Ejercicio 11.
--------------
#!/bin/bash
if [ $# -ne 2 ]; then
    echo "Error: Deben indicarse exactamente 2 parametros."
    exit 1
fi

origen="$1"
destino="$2"

if [ ! -f "$origen" ]; then
    echo "Error: '$origen' no es un archivo regular."
    exit 1
fi

if [ -e "$destino" ]; then
    echo "Error: '$destino' ya existe."
    exit 1
fi

cp "$origen" "$destino"
echo "Archivo '$origen' copiado a '$destino'."


Ejercicio 12.
--------------
#!/bin/bash
hora=$(date +%H)

if [ "$hora" -ge 8 ] && [ "$hora" -lt 15 ]; then
    echo "Buenos dias"
elif [ "$hora" -ge 15 ] && [ "$hora" -lt 20 ]; then
    echo "Buenas tardes"
else
    echo "Buenas noches"
fi


Ejercicio 13.
--------------
#!/bin/bash
ARCHIVO="lista.txt"

while true; do
    echo "=== AGENDA ==="
    echo "1) Añadir"
    echo "2) Buscar"
    echo "3) Listar"
    echo "4) Ordenar"
    echo "5) Borrar"
    echo "6) Salir"
    read -p "Elige una opcion: " opcion

    case $opcion in
        1)
            read -p "Nombre: " nombre
            read -p "Direccion: " direccion
            read -p "Telefono: " telefono
            echo "$nombre,$direccion,$telefono" >> "$ARCHIVO"
            ;;
        2)
            read -p "Buscar (nombre, dirección o teléfono): " criterio
            grep -i "$criterio" "$ARCHIVO"
            ;;
        3)
            cat "$ARCHIVO"
            ;;
        4)
            sort "$ARCHIVO" -o "$ARCHIVO"
            echo "Archivo ordenado."
            ;;
        5)
            rm -f "$ARCHIVO"
            echo "Archivo borrado."
            ;;
        6)
            exit 0
            ;;
        *)
            echo "Opción no válida."
            ;;
    esac
done


Ejercicio 14.
--------------
#!/bin/bash
if [ $# -lt 4 ]; then
    echo "Error. La sintaxis correcta es ./gestionusuarios.sh alta/baja nombre apellido1 apellido2 [grupo]"
    exit 1
fi

accion="$1"
nombre="$2"
ape1="$3"
ape2="$4"
grupo="$5"

id_usr="alu${ape1:0:2}${ape2:0:2}${nombre:0:1}"

if [ "$accion" == "alta" ]; then
    if [ -z "$grupo" ]; then
        groupadd "$id_usr"
        grupo="$id_usr"
    fi
    useradd -m -g "$grupo" "$id_usr"
    echo "Usuario $id_usr dado de alta en el grupo $grupo."
elif [ "$accion" == "baja" ]; then
    userdel -r "$id_usr"
    echo "Usuario $id_usr eliminado."
else
    echo "Error. La sintaxis correcta es ./gestionusuarios.sh alta/baja nombre apellido1 apellido2 [grupo]"
    exit 1
fi


Ejercicio 15.
--------------
#!/bin/bash
n="$1"

for i in {1..10}; do
    echo "$i x $n = $((i*n))"
done

Ejercicio 16.
--------------
#!/bin/bash
# For
suma=0
for i in {1..1000}; do
    suma=$((suma+i))
done
echo "Suma con for: $suma"

# While
suma=0
i=1
while [ $i -le 1000 ]; do
    suma=$((suma+i))
    i=$((i+1))
done
echo "Suma con while: $suma"

# Until
suma=0
i=1
until [ $i -gt 1000 ]; do
    suma=$((suma+i))
    i=$((i+1))
done
echo "Suma con until: $suma"


Ejercicio 17.
--------------
#!/bin/bash
suma=0
while true; do
    read -p "Introduce un numero (0 para terminar): " num
    if [ "$num" -eq 0 ]; then
        echo "La suma total es: $suma"
        break
    fi
    suma=$((suma + num))
done


Ejercicio 18.
--------------
#!/bin/bash
for i in {1..5}; do
    for j in $(seq 1 $i); do
        echo -n "$j"
    done
    echo
done


Ejercicio 19.
--------------
#!/bin/bash
for i in {1..5}; do
    for j in $(seq 1 $i); do
        echo -n "$i"
    done
    echo
done


Ejercicio 20.
--------------
#!/bin/bash
num="$1"

if [ -z "$n" ]; then
    echo "Uso: $0 numero"
    exit 1
fi

if [ "$num" -lt 2 ]; then
    echo "$num NO es primo"
    exit 0
fi

for ((i=2; i<=n/2; i++)); do
    if (( num % i == 0 )); then
        echo "$num NO es primo"
        exit 0
    fi
done

echo "$num es primo"


Ejercicio 21.
--------------
#!/bin/bash
objetivo=42

while true; do
    read -p "Adivina el numero (1-100, 0 para rendirse): " num
    if [ "$num" -eq 0 ]; then
        echo "Te rendiste. El numero era $objetivo."
        break
    elif [ "$num" -eq "$objetivo" ]; then
        echo "¡Enhorabuena! Lo has adivinado."
        break
    elif [ "$num" -lt "$objetivo" ]; then
        echo "El número es mayor."
    else
        echo "El número es menor."
    fi
done


Ejercicio 22.
--------------
#!/bin/bash
dir="$1"

if [ ! -d "$dir" ]; then
    echo "Error: Debes indicar un directorio valido."
    exit 1
fi

count=0
for item in "$dir"/*; do
    if [ -f "$item" ]; then
        echo "$(basename "$item") - Fichero"
    elif [ -d "$item" ]; then
        echo "$(basename "$item") - Directorio"
    fi
    ((count++))
done
echo "Total de entradas: $count"


Ejercicio 23.
--------------
#!/bin/bash
dir="$1"

if [ ! -d "$dir" ]; then
    echo "Error: Debes indicar un directorio valido."
    exit 1
fi

count=0
for item in "$dir"/*; do
    if [ -L "$item" ]; then
        tipo="Enlace simbolico"
    elif [ -b "$item" ]; then
        tipo="Archivo de bloque"
    elif [ -c "$item" ]; then
        tipo="Archivo de caracter"
    elif [ -d "$item" ]; then
        tipo="Directorio"
    elif [ -f "$item" ]; then
        tipo="Fichero"
    else
        tipo="Otro"
    fi
    echo "$(basename "$item") - $tipo"
    ((count++))
done
echo "Total de entradas: $count"


Ejercicio 24.
--------------
#!/bin/bash
dir="$1"

if [ ! -d "$dir" ]; then
    echo "Error: Debes indicar un directorio valido."
    exit 1
fi

ficheros=0
directorios=0

for item in "$dir"/*; do
    if [ -f "$item" ]; then
        ((ficheros++))
    elif [ -d "$item" ]; then
        ((directorios++))
    fi
done

echo "Ficheros: $ficheros"
echo "Subdirectorios: $directorios"
